let Ip = document.getElementById("ip");
let City = document.getElementById("city");
let Country = document.getElementById("country");
let GeonameId = document.getElementById("geonameId");
let Timezone = document.getElementById("timezone");
let Isp = document.getElementById("isp");

let Search = document.getElementById("search");
let Arrow = document.getElementById("arrow");

let isRequesting = false; // ูุชุบูุฑ ููุชุญูู ูู ุฅุฐุง ูุงู ููุงู ุทูุจ ุฌุงุฑู ุชูููุฐู ุฃู ูุง

// ุฅุถุงูุฉ ุฑุณุงูุฉ "Loading..." ูููุณุชุฎุฏู
let LoadingMessage = document.getElementById("loading");
LoadingMessage.style.display = "none"; // ุฅุฎูุงุก ุงูุฑุณุงูุฉ ุจุดูู ุงูุชุฑุงุถู

let map; 
Arrow.onclick = function () {
    let ip = Search.value.trim(); // ุชุฃูุฏ ูู ุฃู ุงููููุฉ ููุณุช ูุงุฑุบุฉ
    const ipRegex = /^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$/;
    const domainRegex = /^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

    if ((ipRegex.test(ip) || domainRegex.test(ip)) && !isRequesting) {
        showLoading(true); // ุฅุธูุงุฑ ุฑุณุงูุฉ "Loading..."
        isRequesting = true; // ูุถุน ุนูุงูุฉ ุนูู ุฃูู ุชู ุจุฏุก ุทูุจ
        getUser(ip);
    } else if (!ip) {
        Swal.fire({
            icon: "warning",
            title: "Oops...",
            text: "Please enter a valid IP address or domain name ๐คจ",
            customClass: {
                popup: "z-[99999]",
            },
        });
    } else {
        Swal.fire({
            icon: "error",
            title: "Invalid Input ๐",
            text: "The input must be a valid IP address or domain name!",
            customClass: {
                popup: "z-[99999]",
            },
        });
    }
};

updateMap(43.6532,-79.3832)
async function getUser(ip_user) {
    try {
        // ุงูุชุฃุฎูุฑ ุจูู ุงูุทูุจุงุช
        await delay(2000); // ุชุฃุฎูุฑ 2 ุซุงููุฉ ูุจู ูู ุทูุจ
        
        const response = await axios.get(`http://ip-api.com/json/${ip_user}`);
        let data = response.data;
        console.log(data);
        Ip.innerHTML = data.query;
        City.innerHTML = data.city || "Not available";
        Country.innerHTML = data.countryCode || "๐";
        GeonameId.innerHTML = data.country || "๐";
        Timezone.innerHTML = data.timezone || "Not available";
        Isp.innerHTML = data.isp || "๐";

        if (data.lat && data.lon) {
            // ุฅุฐุง ูุงูุช ุงูุฅุญุฏุงุซูุงุช ููุฌูุฏุฉุ ูู ุจุชุญุฏูุซ ุงูุฎุฑูุทุฉ
            updateMap(data.lat, data.lon);
        }

        showLoading(false); // ุฅุฎูุงุก ุฑุณุงูุฉ "Loading..."
    } catch (error) {
        console.error(error);
        showLoading(false); // ุฅุฎูุงุก ุฑุณุงูุฉ "Loading..." ูู ุญุงูุฉ ุญุฏูุซ ุฎุทุฃ
        Swal.fire({
            icon: "error",
            title: "Oops...",
            text: "Error fetching data. Please try again ๐",
            customClass: {
                popup: "z-[99999]",
            },
        });
    } finally {
        isRequesting = false; // ุนูุฏ ุงูุงูุชูุงุก ูู ุงูุทูุจุ ุฅุนุงุฏุฉ ุชุนููู ูุชุบูุฑ ุงูุทูุจ
    }
}

// ุฏุงูุฉ ุชุฃุฎูุฑ
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// ุฏุงูุฉ ูุนุฑุถ ุฃู ุฅุฎูุงุก ุฑุณุงูุฉ "Loading..."
function showLoading(isLoading) {
    if (isLoading) {
        LoadingMessage.style.display = "block"; // ุฅุธูุงุฑ ุงูุฑุณุงูุฉ
    } else {
        LoadingMessage.style.display = "none"; // ุฅุฎูุงุก ุงูุฑุณุงูุฉ
    }
}

// ุงูุชููุฆุฉ ูุฅูุดุงุก ุงูุฎุฑูุทุฉ
function updateMap(lat, lon) {
    // ุฅุฐุง ูุงูุช ุงูุฎุฑูุทุฉ ููุฌูุฏุฉ ุจุงููุนูุ ูู ุจุฅุฒุงูุฉ ุงูุฎุฑูุทุฉ ุงูุณุงุจูุฉ
    if (map) {
        map.remove();
    }

    // ุชููุฆุฉ ุงูุฎุฑูุทุฉ ูุน ุงูุฅุญุฏุงุซูุงุช ุงูุฌุฏูุฏุฉ
    map = L.map('map').setView([lat, lon], 13);

    // ุฅุถุงูุฉ ุฎุฑูุทุฉ OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    var customIcon = L.icon({
        iconUrl: './images/icon-location.svg', // ูู ุจุชุญุฏูุฏ ุงููุณุงุฑ ุงูุตุญูุญ ููุตูุฑุฉ
        iconSize: [50, 50],  // ุญุฌู ุงูุฃููููุฉ
        iconAnchor: [25, 50],  // ุงูููุทุฉ ุงูุชู ุณูุชู ุชุซุจูุช ุงูุฃููููุฉ ุนูููุง
        popupAnchor: [0, -50]  // ุชุนุฏูู ููุงู ุงูููุงุนุฉ ุงูุฎุงุตุฉ ุจู popup
    });

    // ุฅุถุงูุฉ ุนูุงูุฉ ูููููุน
    L.marker([lat, lon], { icon: customIcon }).addTo(map)
                .bindPopup("<b>Your Location</b>")
                .openPopup();
}
